@using WNMS.Model.CustomizedClass
@model IEnumerable<dynamic>
<style>
    table tbody {
        display: block;
        overflow-y: scroll;
    }

    table thead, tbody tr {
        display: table;
        width: 100%;
        table-layout: fixed;
    }

        table thead th {
            overflow: hidden;
            text-overflow: ellipsis;
        }
</style>
<table id="tabledata" >
    <thead>
        <tr>
            <th>日期</th>
            <th>用水量(m³)</th>
            <th>用电量(kW·h)</th>
            <th>吨水电耗(kW·h/m³)</th>
        </tr>
        <tr>
            <th>最大值</th>
            @{
                var maxflow = Model.Max(r => r.FlowCon);
                var maxenergy = Model.Max(r => r.EnergyCon);
                var maxconsump = Model.Where(r=>r.consump.ToString()!="").Max(r => r.consump);
                <th>@(maxflow == null ? "--" : Math.Round((double)maxflow, 2).ToString())</th>
                <th>@(maxenergy == null ? "--" : Math.Round((double)maxenergy, 2).ToString())</th>
                <th>@(maxconsump == null ? "--" : Math.Round((double)maxconsump, 2).ToString())</th>

            }
        </tr>
        <tr>
            <th>最大时间</th>
            @{
                <th>@(Model.Where(r => r.FlowCon == maxflow).FirstOrDefault()==null?"--":Model.Where(r => r.FlowCon == maxflow).FirstOrDefault().UpdateTime.ToString(ViewBag.timeformate))</th>
                <th>@(Model.Where(r => r.EnergyCon == maxenergy).FirstOrDefault()==null?"--":Model.Where(r => r.EnergyCon == maxenergy).FirstOrDefault().UpdateTime.ToString(ViewBag.timeformate))</th>
                
                <th>@(Model.Where(r =>r.consump.ToString()!=""&& r.consump == maxconsump).FirstOrDefault()==null?"--":Model.Where(r =>r.consump.ToString()!=""&& r.consump == maxconsump).FirstOrDefault().UpdateTime.ToString(ViewBag.timeformate))</th>
            }
        </tr>
        <tr>
            <th>最小值</th>
            @{
                var minflow = Model.Min(r => r.FlowCon);
                var minenergy = Model.Min(r => r.EnergyCon);
                var minconsump = Model.Where(r=>r.consump.ToString()!="").Min(r => r.consump);
                <th>@(minflow == null ? "--" : Math.Round((double)minflow, 2).ToString())</th>
                <th>@(minenergy == null ? "--" : Math.Round((double)minenergy, 2).ToString())</th>
                <th>@(minconsump == null ? "--" : Math.Round((double)minconsump, 2).ToString())</th>

            }
        </tr>
        <tr>
            <th>最小时间</th>
            @{
                <th>@(Model.Where(r => r.FlowCon == minflow).FirstOrDefault()==null?"--":Model.Where(r => r.FlowCon == minflow).FirstOrDefault().UpdateTime.ToString(ViewBag.timeformate))</th>
                <th>@(Model.Where(r => r.EnergyCon == minenergy).FirstOrDefault()==null?"--":Model.Where(r => r.EnergyCon == minenergy).FirstOrDefault().UpdateTime.ToString(ViewBag.timeformate))</th>
                <th>@(Model.Where(r =>r.consump.ToString()!=""&& r.consump == minconsump).FirstOrDefault()==null?"":Model.Where(r => r.consump.ToString()!=""&&r.consump == minconsump).FirstOrDefault().UpdateTime.ToString(ViewBag.timeformate))</th>
            }
        </tr>
        <tr>
            <th>平均值</th>
            @{

                var aveF = Model.Average(r => (double)r.FlowCon);
                var aveE = Model.Average(r => (double)r.EnergyCon);
                var aveClist = Model.Where(r => r.consump.ToString() != "");
               
                <th>@(Math.Round((double)aveF,2).ToString())</th>
                <th>@(Math.Round((double)aveE, 2).ToString())</th>
                if(aveClist.Count()>0)
                {
                     <th>@(Math.Round((double)aveClist.Average(r => (double)r.consump), 2).ToString())</th>
                }
                else
                { 
                    <th>--</th>
                }
            
                
            }
        </tr>
    </thead>
    <tbody >
        @foreach(var item in Model)
        {
        <tr>
            <td>@item.UpdateTime.ToString(ViewBag.timeformate)</td>
            <td>@(item.FlowCon.ToString() == "" ? "--" : Math.Round((double)item.FlowCon, 2).ToString())</td>
            <td>@(item.EnergyCon.ToString() == "" ? "--" : Math.Round((double)item.EnergyCon, 2).ToString())</td>
            <td>@(item.consump.ToString() == "" ? "--" : Math.Round((double)item.consump, 2).ToString())</td>
        </tr>  
        }
    </tbody>
 </table>
<script>
     if ($("thead tr").length > 2) {
         $("table tbody").css("height", $("#tablebox").height() - 325);
         $("thead").css("width","calc(100% - 8px)")
    } else {
        $("table tbody").css("height", $("#tablebox").height() - 40);
    }
</script>