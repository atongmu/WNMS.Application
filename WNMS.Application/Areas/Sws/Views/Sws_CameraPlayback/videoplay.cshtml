
@{
    Layout = null;
}

<!DOCTYPE html>

@*<html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>videoplay</title>
    </head>
    <body>
        <div>
            <video id="playElement" style="width:100%; height:100%; object-fit: fill"></video>
        </div>
        <script src="~/DataV/js/jquery-1.12.4.min.js"></script>
        <script src="~/lib/flv/flv.min.js"></script>
        <script src="~/lib/player/cyberplayer.js"></script>
        <script>
            //var url ='@ViewBag.Url';
            var url ='rtmp://222.173.103.226:1935/vod/openUrl/9ykrcJ2beginTime=20210801T032521&endTime=20210801T040031';
            $(function () {
                //getLiveUrl(url);
                live("playElement", url);
            });
            function getLiveUrl(url) {

                //alert(result.data.key);
                if (flvjs.isSupported()) {
                    var videoElement = document.getElementById("playElement");
                    var flvPlayer = flvjs.createPlayer({
                        type: 'flv',
                        url: url
                    });
                    flvPlayer.attachMediaElement(videoElement);
                    flvPlayer.load();
                    flvPlayer.play();
                }
            }

            //乐橙直播
            function live(video, url) {
                var player = cyberplayer(video).setup({
                    width: "100%",
                    height: "100%",
                    title: 'demo示例',
                    isLive: true,
                    file: url,
                    image: '',
                    autostart: true,
                    stretching: "uniform",
                    repeat: false,
                    volume: 0,
                    controls: true,
                    hls: {
                        reconnecttime: 5
                    },
                    ak: "39f82ac87fc3462ea4dcc78734450f57"
                });

            }
        </script>
    </body>
    </html>*@

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>zxsphkplayback</title>
    <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        .playWnd {
            margin: 0px 0 0 0px;
            width: 900px;
            height: 600px;
            border: 1px solid red;
        }
    </style>
</head>
<body>
    <div id="playWnd" class="playWnd">
    </div>
    <script src="~/js/jquery-1.12.4.min.js"></script>
    <script src="~/video/demos1/jsencrypt.min.js"></script>
    <script src="~/video/demos1/jsWebControl-1.0.0.min.js"></script>
    @*<script type="text/javascript" src="http://pv.sohu.com/cityjson?ie=utf-8"></script>*@

    <script type="text/javascript">

    //页面加载时创建播放实例初始化
    $(window).load(function () {
        initPlugin();
    });
    //声明公用变量
    var ip = 0;
    var initCount = 0;
    var pubKey = '';
    var h = $(window).height();
        var w = $(window).width();
        var oWebControl = null;
        var bIE = (!!window.ActiveXObject || 'ActiveXObject' in window);// 是否为IE浏览器
        var iframePos = {};               // iframe相对文档的位置
        var parentTitle = '';	          // 父页面标题
        var iframeClientPos = null;       // iframe相对视窗的位置
        var iframeParentShowSize = null;  // 视窗大小 width height


        // 标签关闭
        $(window).unload(function () {
            if (oWebControl != null) {
                oWebControl.JS_HideWnd();  // 先让窗口隐藏，规避可能的插件窗口滞后于浏览器消失问题
                oWebControl.JS_Disconnect().then(function () { }, function () { });
            }
        });

        // 顶部：iframe.getBoundingClientRect().top小于0并且其绝对值超过DIV.get(0).getBoundingClientRect().top部分需要剪切
        // 底部：(iframe.getBoundingClientRect().bottom - iframe父窗口可视域高度，为H1)为不可见部分
        //       ($(window).height() - DIV.get(0).getBoundingClientRect().bottom)
        //        为DIV底部与其所在iframe底部之间的距离H2，H1-H2的值大于0则表示DIV有部分在不可见区域
        // 左边：iframe.getBoundingClientRect().left小于0并且其绝对值超过DIV.get(0).getBoundingClientRect().left部分需要剪切
        // 右边：(iframe宽度 - DIV.get(0).getBoundingClientRect().right表示DIV右边与其父iframe右边之间的距离，为W1)
        //       (iframe父窗口可视域宽度-iframe.getBoundingClientRect().left表示iframe左边与iframe父窗口可视域右边之间的距离，为W2)
        //       (iframe宽度 - W2 - W1)如果大于0，则表示DIV右边超出了iframe父窗口可视域，需要剪切超过的部分
        function setWndCover() {
            if (oWebControl) {
                // 准备要用到的一些数据
                var iframeWndHeight = $(window).height();  // iframe窗口高度
                var iframeWndWidth = $(window).width();    // iframe窗口宽度
                //var divLeft = $("#playWnd").get(0).getBoundingClientRect().left;
                //var divTop = $("#playWnd").get(0).getBoundingClientRect().top;
                //var divRight = $("#playWnd").get(0).getBoundingClientRect().right;
                //var divBottom = $("#playWnd").get(0).getBoundingClientRect().bottom;
                var divLeft = window.parent.offsetLeft;
                var divTop = window.parent.offsetTop + window.parent.height;
                var divRight = $(window.parent).width() - divLeft - iframeWndWidth;
                var divBottom = $(window.parent).height() - divTop - iframeWndHeight;
                var divWidth = $("#playWnd").width();
                var divHeight = $("#playWnd").height();

                oWebControl.JS_RepairPartWindow(0, 0, 901, 601);  // 多1个像素点防止还原后边界缺失一个像素条

                // 判断剪切矩形的上边距        
                if (iframeClientPos.top < 0 && Math.abs(iframeClientPos.top) > divTop) {
                    var deltaTop = Math.abs(iframeClientPos.top) - divTop;
                    oWebControl.JS_CuttingPartWindow(0, 0, 901, deltaTop + 1);
                    //console.log({deltaTop: deltaTop});
                }

                // 判断剪切矩形的左边距
                if (iframeClientPos.left < 0 && Math.abs(iframeClientPos.left) > divLeft) {
                    var deltaLeft = Math.abs(iframeClientPos.left) - divLeft;
                    //console.log({deltaLeft: deltaLeft});
                    oWebControl.JS_CuttingPartWindow(0, 0, deltaLeft, 401);  // 多剪掉一个像素条，防止出现剪掉一部分窗口后出现一个像素条
                }

                // 判断剪切矩形的右边距
                var W1 = iframeWndWidth - divRight;
                var W2 = iframeParentShowSize.width - iframeClientPos.left;
                if (W2 < divWidth) {
                    var deltaRight = iframeWndWidth - W2 - W1;
                    if (deltaRight > 0) {
                        oWebControl.JS_CuttingPartWindow(800 - deltaRight, 0, deltaRight + 1, 401);
                    }
                }

                // 判断剪切矩形的下边距
                var H1 = iframeClientPos.bottom - iframeParentShowSize.height;
                var H2 = iframeWndHeight - divBottom;
                var deltaBottom = H1 - H2;
                //console.log({deltaBottom: deltaBottom});		
                if (deltaBottom > 0) {
                    oWebControl.JS_CuttingPartWindow(0, 400 - deltaBottom, 801, deltaBottom + 1);
                }
            }
        }




    // 创建WebControl实例与启动插件
    function initPlugin () {
        oWebControl = new WebControl({
            szPluginContainer: "playWnd",                       //指定容器id
            iServicePortStart: 15900,                           //指定起止端口号，建议使用该值
            iServicePortEnd: 15909,
            cbConnectSuccess: function () {
                setCallbacks();
                //实例创建成功后需要启动服务
                oWebControl.JS_StartService("window", {
                    dllPath: "./VideoPluginConnect.dll"
                }).then(function () {
                    oWebControl.JS_CreateWnd("playWnd", 900, 600, {

                    }).then(function () {         //JS_CreateWnd创建视频播放窗口，宽高可设定
                        console.log("JS_CreateWnd success");
                        // 步骤3：JS_CreateWnd成功后通知父页面将其标题修改回去
                        init();                                 //创建播放实例成功后初始化
                    });
                }, function () {

                });
            },
            cbConnectError: function () {
                console.log("cbConnectError");
                oWebControl = null;
                $("#playWnd").html("插件未启动，正在尝试启动，请稍候...");
                WebControl.JS_WakeUp("VideoWebPlugin://");        //程序未启动时执行error函数，采用wakeup来启动程序
                initCount ++;
                if (initCount < 3) {
                    setTimeout(function () {
                        initPlugin();
                    }, 3000)
                } else {
                    $("#playWnd").html("插件启动失败，请检查插件是否安装！<a href='../../ActiveX/VideoWebPlugin.zip'>插件下载</a>");
                }
            },
            cbConnectClose: function () {
                console.log("cbConnectClose");
                oWebControl = null;
            }
        });

    }

    //初始化
    function init()
    {
        getPubKey(function () {
			////////////////////////////////// 请自行修改以下变量值	////////////////////////////////////
            var appkey = "@ViewBag.AppKey";                           //综合安防管理平台提供的appkey，必填
            var secret = setEncrypt("@ViewBag.AppSecret");   //综合安防管理平台提供的secret，必填
            var ip = "@ViewBag.IP";                           //综合安防管理平台IP地址，必填
            var playMode = 1;                                  //初始播放模式：0-预览，1-回放
            var port = @ViewBag.Port;                                    //综合安防管理平台端口，若启用HTTPS协议，默认443
            var snapDir = "D:\\SnapDir";                       //抓图存储路径
            var videoDir = "D:\\VideoDir";                     //紧急录像或录像剪辑存储路径
            var layout = "1x1";                                //playMode指定模式的布局
            var enableHTTPS = 1;                               //是否启用HTTPS协议与综合安防管理平台交互，这里总是填1
            var encryptedFields = 'secret';					   //加密字段，默认加密领域为secret
			var showToolbar = 1;                               //是否显示工具栏，0-不显示，非0-显示
			var showSmart = 1;                                 //是否显示智能信息（如配置移动侦测后画面上的线框），0-不显示，非0-显示
			var buttonIDs = "0,16,256,257,258,259,260,512,513,514,515,516,517,768,769";  //自定义工具条按钮
			//var reconnectTimes = 2;                            // 重连次数，回放异常情况下有效
			//var reconnectTime = 4;                             // 每次重连的重连间隔 >= reconnectTime
			////////////////////////////////// 请自行修改以上变量值	////////////////////////////////////

            oWebControl.JS_RequestInterface({
                funcName: "init",
                argument: JSON.stringify({
                    appkey: appkey,                            //API网关提供的appkey
                    secret: secret,                            //API网关提供的secret
                    ip: ip,                                    //API网关IP地址
                    playMode: playMode,                        //播放模式（决定显示预览还是回放界面）
                    port: port,                                //端口
                    snapDir: snapDir,                          //抓图存储路径
                    videoDir: videoDir,                        //紧急录像或录像剪辑存储路径
                    layout: layout,                            //布局
                    enableHTTPS: enableHTTPS,                  //是否启用HTTPS协议
                    encryptedFields: encryptedFields,          //加密字段
					showToolbar: showToolbar,                  //是否显示工具栏
					showSmart: showSmart,                      //是否显示智能信息
					buttonIDs: buttonIDs                       //自定义工具条按钮
					//reconnectTimes：reconnectTimes,            //重连次数
					//reconnectDuration：reconnectTime           //重连间隔
                })
            }).then(function (oData) {
                oWebControl.JS_SetDocOffset({
                    left: window.parent.offsetLeft,
                    top: window.parent.offsetTop + window.parent.height
                });  // 更新插件窗口位置

                oWebControl.JS_Resize(900, 600);  // 初始化后resize一次，规避firefox下首次显示窗口后插件窗口未与DIV窗口重合问题
                playbackView('@ViewBag.Num');
            });
        });
    }

    // 获取公钥
    function getPubKey (callback) {
        oWebControl.JS_RequestInterface({
            funcName: "getRSAPubKey",
            argument: JSON.stringify({
                keyLength: 1024
            })
        }).then(function (oData) {
            console.log(oData);
            if (oData.responseMsg.data) {
                pubKey = oData.responseMsg.data;
                callback()
            }
        })
    }

    // RSA加密
    function setEncrypt (value) {
        var encrypt = new JSEncrypt();
        encrypt.setPublicKey(pubKey);
        return encrypt.encrypt(value);
    }

	// 监听resize事件，使插件窗口尺寸跟随DIV窗口变化
	 $(window).resize(function () {
        if (oWebControl != null) {
            oWebControl.JS_Resize(900, 600);
            //setWndCover();
        }
    });

	// 监听滚动条scroll事件，使插件窗口跟随浏览器滚动而移动
	$(window).scroll(function () {
        if (oWebControl != null) {
            oWebControl.JS_Resize(900, 600);
            //setWndCover();
        }
    });

        // 设置窗口控制回调
        function setCallbacks() {
            oWebControl.JS_SetWindowControlCallback({
                cbIntegrationCallBack: cbIntegrationCallBack
            });
        }

        // 推送消息
        function cbIntegrationCallBack(oData) {
            //$.post("/Single/InsertData", { userIp: ip, msgtype: oData.responseMsg.type, value: oData.responseMsg.msg.result, cameracode: oData.responseMsg.msg.cameraIndexCode, typemode: 1, winId: oData.responseMsg.msg.wndId }, function () {

            //});
            //showCBInfo(JSON.stringify(oData.responseMsg));
        }

        //录像回放
        function playbackView(num) {
            var cameraIndexCode = num;         //获取输入的监控点编号值，必填
            var startTimeStamp = new Date(startTime.replace('-', '/').replace('-', '/')).getTime();    //回放开始时间戳，必填
            var endTimeStamp = new Date(endTime.replace('-', '/').replace('-', '/')).getTime();        //回放结束时间戳，必填
            var playTimeStamp = new Date(playTime.replace('-', '/').replace('-', '/')).getTime();
            var recordLocation = 1;                                     //录像存储位置：0-中心存储，1-设备存储
            var transMode = 1;                                          //传输协议：0-UDP，1-TCP
            var gpuMode = 0;                                            //是否启用GPU硬解，0-不启用，1-启用
            var wndId = -1;                                             //播放窗口序号（在2x2以上布局下可指定播放窗口）

            oWebControl.JS_RequestInterface({
                funcName: "startPlayback",
                argument: JSON.stringify({
                    cameraIndexCode: cameraIndexCode,                   //监控点编号
                    startTimeStamp: Math.floor(startTimeStamp / 1000).toString(),  //录像查询开始时间戳，单位：秒
                    endTimeStamp: Math.floor(endTimeStamp / 1000).toString(),      //录像结束开始时间戳，单位：秒
                    playTimeStamp: Math.floor(playTimeStamp / 1000).toString(),
                    recordLocation: recordLocation,                     //录像存储类型：0-中心存储，1-设备存储
                    transMode: transMode,                               //传输协议：0-UDP，1-TCP
                    gpuMode: gpuMode,                                   //是否启用GPU硬解，0-不启用，1-启用
                    wndId: wndId                                         //可指定播放窗口
                })
            });
        }


        //停止录像回放
        function stopbackView() {
            oWebControl.JS_RequestInterface({
                funcName: "stopAllPlayback"
            });
        }

        //设置录像回放时间的默认值
        var date = new Date();
        date.setMonth(date.getMonth() - 1);
        var endTime ='@ViewBag.endTime';
        var startTime = '@ViewBag.beginTime';
        var playTime = '@ViewBag.beginTime';
        //// 格式化时间
        //function dateFormat(oDate, fmt) {
        //    var o = {
        //        "M+": oDate.getMonth() + 1, //月份
        //        "d+": oDate.getDate(), //日
        //        "h+": oDate.getHours(), //小时
        //        "m+": oDate.getMinutes(), //分
        //        "s+": oDate.getSeconds(), //秒
        //        "q+": Math.floor((oDate.getMonth() + 3) / 3), //季度
        //        "S": oDate.getMilliseconds()//毫秒
        //    };
        //    if (/(y+)/.test(fmt)) {
        //        fmt = fmt.replace(RegExp.$1, (oDate.getFullYear() + "").substr(4 - RegExp.$1.length));
        //    }
        //    for (var k in o) {
        //        if (new RegExp("(" + k + ")").test(fmt)) {
        //            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        //        }
        //    }
        //    return fmt;
        //}
        //function moveEnd() {
        //    oWebControl.JS_SetDocOffset({
        //        left: window.parent.offsetLeft,
        //        top: window.parent.offsetTop + window.parent.height
        //    });
        //}
    </script>
</body>
</html>
