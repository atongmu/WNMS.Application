
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>数据字典</title>
    <link rel="stylesheet" href="~/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/zlw.css">
    <link href="~/css/hyl.css" rel="stylesheet" />
    <script src="~/js/jquery-1.12.4.min.js"></script>


    <link rel="stylesheet" href="~/css/bootstrap-table.min.css">
    <link href="~/lib/layer/layer.css" rel="stylesheet" />
    <!-- 按钮 -->
    <link rel="stylesheet" href="~/css/anniu.css">
    <!-- bootstrap -->
    <link href="~/css/bootstrap.min.css" rel="stylesheet" />
    @*<link href="~/lib/bootstrap/dist/css/bootstrap.css" rel="stylesheet" />*@
    <script src="~/js/bootstrap.js"></script>
    <script src="~/js/bootstrap-table.min.js"></script>
    <script src="~/js/bootstrap-table-zh-CN.min.js"></script>

    @*<link rel="stylesheet" href="~/css/font-awesome.min.css">*@
    <!-- 树 -->
    <link href="~/lib/ztree/diy/zTreeStyle01.css" rel="stylesheet" />
    @*<link href="~/lib/ztree/zTreeStyle.css" rel="stylesheet" />*@
    <script src="~/lib/ztree/jquery.ztree.core-3.5.js"></script>
    <script src="~/lib/ztree/jquery.ztree.excheck-3.5.js"></script>
    <link href="~/lib/font-awesome/css/font-awesome.css" rel="stylesheet" />

    <script src="~/lib/layer/layer.js"></script>
    <style>
        .ztree .fa {
            padding-right: 5px;
        }
    </style>
</head>
<body>
    <div class="zlw_manage">
        <div class="zlw_managecon">
            <!-- star left -->
            <div class="zlw_manageconlf">
                <div class="zlw_manageconlfcon">
                    <div class="zlw_managecontitle">
                        <p style="margin:0 !important"> <i class="fa fa-address-card"></i> 字典分类</p>
                    </div>
                    <div id="treeDemo" class="ztree">
                        <!-- tree渲染区域 -->
                    </div>
                </div>
            </div>
            <!-- left end -->
            <!-- star right -->
            <div class="zlw_manageconrg">
                <div class="zlw_manageconrgcon">
                    <div class="overflow" style="border-bottom:1px solid #ddd;height:51px">
                        <div class="btn-group mar10px pull-left">
                            <input type="text" id="searchtext" class="hyl_input" placeholder="输入字典名称" autocomplete="off">
                            <button class="hyl_btn" id="searchbtn"> <i class="fa fa-search"></i> 查询</button>
                        </div>
                        <div class="btn-group mar10px pull-right" style="margin-right:10px">
                            @await Component.InvokeAsync("ModuleButtons")
                            @*<button type="button" class="btn btn-default" id="addbtn"><i class="fa fa-plus"></i> 添加</button>
                                <button type="button" class="btn btn-default" id="editebtn"><i class="fa fa-pencil-square-o"></i>  编辑</button>
                                <button type="button" class="btn btn-default" id="deletebtn"><i class="fa fa-trash-o"></i> 删除</button>
                                <button type="button" class="btn btn-default" id="dataClassify"><i class="fa fa-reorder"></i> 字典分类</button>*@
                        </div>
                    </div>

                    <!-- 表格 -->
                    <div class="zlw_manageconrgconsan" style="height: calc(100% - 50px);margin-top:10px">
                        <table id="tabledata" class="table-striped">
                        </table>
                    </div>
                </div>
            </div>
            <!-- right end -->
        </div>
    </div>


    <script type="text/javascript">
        $(function () {
            // GetTableData();
        })

        //function GetTableData() {
        //      var data = {
        //    ItemName: $("#name").val(),
        //    pid:1
        //    };
        //    $.ajax({
        //    url: '/Sys_DataItem/QueryTable',
        //    type: 'POST',
        //    contentType: 'application/json',
        //    data: JSON.stringify(data),
        //    success: function (data) {

        //     }
        // });
        function GetTableData() {
            var data = {
                ItemName: $("#name").val(),
                pid: 1
            };
            $.ajax({
                url: '/Sys_DataItem/QueryTable',
                type: 'POST',

                //contentType: 'application/json',
                data: data,
                success: function (data) { alert(data); }, datatype: "json"
            });


        }
    </script>
    <script>
        //$(".button_su_inner").mouseenter(function (e) {
        //    var parentOffset = $(this).offset();
        //    var relX = e.pageX - parentOffset.left;
        //    var relY = e.pageY - parentOffset.top;
        //    $(this).prev(".su_button_circle").css({
        //        "left": relX,
        //        "top": relY
        //    });
        //    $(this).prev(".su_button_circle").removeClass("desplode-circle");
        //    $(this).prev(".su_button_circle").addClass("explode-circle");
        //});
        //$(".button_su_inner").mouseleave(function (e) {
        //    var parentOffset = $(this).offset();
        //    var relX = e.pageX - parentOffset.left;
        //    var relY = e.pageY - parentOffset.top;
        //    $(this).prev(".su_button_circle").css({
        //        "left": relX,
        //        "top": relY
        //    });
        //    $(this).prev(".su_button_circle").removeClass("explode-circle");
        //    $(this).prev(".su_button_circle").addClass("desplode-circle");
        //});
        //$(".button_su_inner").mouseenter(function (e) {
        //    var parentOffset = $(this).offset();
        //    var relX = e.pageX - parentOffset.left;
        //    var relY = e.pageY - parentOffset.top;
        //    $(this).prev(".su_button_circle").css({
        //        "left": relX,
        //        "top": relY
        //    });
        //    $(this).prev(".su_button_circle").removeClass("desplode-circle");
        //    $(this).prev(".su_button_circle").addClass("explode-circle");
        //});
        //$(".button_su_inner").mouseleave(function (e) {
        //    var parentOffset = $(this).offset();
        //    var relX = e.pageX - parentOffset.left;
        //    var relY = e.pageY - parentOffset.top;
        //    $(this).prev(".su_button_circle").css({
        //        "left": relX,
        //        "top": relY
        //    });
        //    $(this).prev(".su_button_circle").removeClass("explode-circle");
        //    $(this).prev(".su_button_circle").addClass("desplode-circle");
        //});
    </script>
    <script>
         var pageindex = 1;
          var setting = {
            data:{
                simpleData: {
                    enable: true
                }
            },callback:{
                onClick: zTreeOnClick
            },view: {
                showTitle:false,
                showLine: true,
                nameIsHTML: true,
                showIcon: false
            }
        };
        var zNodes = @ViewBag.treenode;
        var zTreeObj;
        var pidtree = 0;
        // 按钮切换样式
        $(function () {

            zTreeObj=$.fn.zTree.init($("#treeDemo"), setting, zNodes);
            //1.初始化Table
            var oTable = new TableInit();
            oTable.Init();
            $(".zlw_time_con li").click(function () {
                $(this).siblings('.zlw_time_con li').removeClass('zlw_bgact');  // 删除其他兄弟元素的样式
                $(this).addClass('zlw_bgact');                            // 添加当前元素的样式
            });



        })
   var TableInit = function () {
    var oTableInit = new Object();
    //初始化Table
    oTableInit.Init = function () {
        $('#tabledata').bootstrapTable({
           method: "post",
           url: "/Sys/Sys_DataItem/QueryTable",
            //toolbar: '#toolbar',                //工具按钮用哪个容器
            striped: true,                      //是否显示行间隔色
            cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
            pagination: true,                   //是否显示分页（*）
            sortable: true,                     //是否启用排序
            sortOrder: "asc",                   //排序方式

            sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
            pageNumber: 1,                       //初始化加载第一页，默认第一页
            pageSize: 10,                       //每页的记录行数（*）
            pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）
            //search: true,                       //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大
            contentType: "application/x-www-form-urlencoded",
            //strictSearch: true,
            //showColumns: true,                  //是否显示所有的列
            //showRefresh: true,                  //是否显示刷新按钮
            //minimumCountColumns: 2,             //最少允许的列数
            //clickToSelect: true,                //是否启用点击选中行
            height: $(window).height() - 50,                        //行高，如果没有设置height属性，表格自动根据记录条数觉得表格高度
             queryParams: function (params) {
        var temp = {   //这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的
            pagesize: params.limit,   //每页条数
            pageindex: (params.offset/params.limit)+1, //页码
            ItemName: $("#searchtext").val(),
            pid: pidtree,
            order: params.order,
            sort: params.sort==undefined?"Sort":params.sort
        };
        return temp;},//传递参数（*）
            uniqueId: "no",                     //每一行的唯一标识，一般为主键列
            showToggle: false,                    //是否显示详细视图和列表视图的切换按钮
            //cardView: false,                    //是否显示详细视图
            //detailView: false,                   //是否显示父子表
            responseHandler: function (res) {
                var aa = JSON.parse(res.rows);
                    return {
                        'total': res.total, //总的数据长度
                        'rows': JSON.parse(res.rows) //单页查询返回的数据
                    }
            },
 //           ajax : function (request) {
 //               $.ajax({
 //                   type: "post",
 //                   url: "QueryTable",
 //                   //contentType: "application/json",
 //                   dataType: "json",
 //                   data: {
 //                         pageindex: 1,   //页面大小
 //           pagesize:10
 //                   },

 //           success : function (data) {
	//			request.success({
 //                   row : data.total
 //               });
 //               $('#tabledata').bootstrapTable('load', data.rows);
 //           },
	//		error:function(){
	//			alert("错误");
	//		}
 //       });
	//},

            columns: [
                {
                     checkbox: true
                },
                {
                sortable:true,
                field: 'ItemDetailId',
                title: 'ID'
                }, {
                sortable:true,
                field: 'ItemName',
                title: '名称'
                }, {
                sortable:true,
                field: 'Sort',
                title: '排序'
            },
            {
                field: 'IsEnable',
                title: '是否可用',
                formatter: operateFormatter //自定义方法，添加操作按钮
                },

            {
                field: 'Remark',
                title: '备注'
                //formatter: operateFormatter //自定义方法，添加操作按钮
            }
            ]
            //rowStyle: function (row, index) {
            //    var classesArr = ['success', 'info'];
            //    var strclass = "";
            //    if (index % 2 === 0) {//偶数行
            //        //strclass = classesArr[0];
            //    } else {//奇数行
            //        strclass = classesArr[1];
            //    }
            //    return { classes: strclass };
            //},//隔行变色
        });

    };


    //得到查询的参数
    oTableInit.queryParams = function (params) {
        var temp = {   //这里的键的名字和控制器的变量名必须一直，这边改动，控制器也需要改成一样的
            pageindex: params.limit+1,   //页面大小
            pagesize:params.offset+1
            //pageindex: 1,   //页面大小
            //pagesize:10
        };
        return temp;
    };
    return oTableInit;
        };
             //左侧树查询回车事件
     $("#searchtext").keydown(function(e) {  
           if (e.keyCode == 13) {  
               var pageindex = 1;
                refreshData();
               return false;
           }  
        });  
     //树点击事件
    function zTreeOnClick(event, treeId, treeNode) {
        pidtree = treeNode.id;
        var pageindex = 1;
        refreshData();
};
        //查询
        $("#searchbtn").click(function () {
            var pageindex = 1;
            refreshData();

        })
        function operateFormatter(value, row, index) {//赋予的参数
            if (value == true) {
                return "是";
            }
            else {
                return "否";
            }

        }
        //添加
        $("#addbtn").click(function () {
            if (pidtree != 0) {
                iframe("添加字典", "800px", "500px", "/Sys/Sys_DataItem/AddPage/"+pidtree);
            }
            else {
                layer.msg("请选中一个字典分类");
            }

        })
        //修改
        $("#editebtn").click(function () {
            var lenthcheck = $("#tabledata").bootstrapTable('getSelections');
            if (lenthcheck.length == 1) {
                var ItemDetailId = lenthcheck[0].ItemDetailId;

                 iframe("编辑字典", "800px", "500px", "/Sys/Sys_DataItem/EditePage/" + ItemDetailId);
            }
            else {
                layer.msg("请选中一行");
            }
        })
        //删除
        //删除用户方法
        $("#deletebtn").click(function () {
            var lenthcheck = $("#tabledata").bootstrapTable('getSelections');
            if (lenthcheck.length <= 0) {
                layer.msg("请至少选中一行", {
                    offset: 't',
                    anim: 6
                });
            } else {
                var id = "";
                for (i = 0; i < lenthcheck.length; i++) {
                    id += lenthcheck[i].ItemDetailId + ",";
                }
                id = id.substring(0, id.length - 1);
                layer.confirm("确定要删除字典？", {
                    btn: ["确定", "取消"]
                },
                    function () {
                        deleteItemDetail(id);
                    },
                    function () { }
                );
            }
        })

        //删除用户
        function deleteItemDetail(id) {
            $.ajax({
                url: '/Sys/Sys_DataItem/DeleteItemDetail',
                type: 'POST',
                datatype: "json",
                //contentType: 'application/json',
                data: {"":id},
                success: function (data) {
                    if (data == "ok") {
                        layer.msg("删除成功");
                       var pageindex = 1;
                        refreshData();
                    }
                    else {
                        layer.msg("删除失败");
                    }
                },
                error: function (data) {
                    layer.msg("删除失败");
                }
            })
        }
        function refreshData() {

            var opt = {
                pageNumber: pageindex
            };
            $("#tabledata").bootstrapTable('refresh',opt);
        }
        //字典分类
        $("#dataClassify").click(function () {
            iframe1("添加字典", "80%", "80%", "/Sys/Sys_DataItem/ClassifyPage");
        })
        //左侧树刷新
        function freashTree() {
            
            $.post("/Sys/Sys_DataItem/GetClassifyTree", {}, function (data) {

                  zTreeObj.destroy();    //清空树
                  var aa= JSON.parse(data);   //数据转json 
                  zTreeObj = $.fn.zTree.init($("#treeDemo"), setting, aa);
                var nodes = zTreeObj.getNodeByParam("id", pidtree, null);
                if (nodes != null && nodes != undefined) {
	                 zTreeObj.selectNode(nodes);
                    }
            });

        }
         function iframe(title, width, height, url) {
            layer.open({
                type: 2,
                title: title,
                shadeClose: true,
                shade: 0.7,
                area: [width, height],
                content: url,
                btn: ["提交", "取消"],
                yes: function (index, layero) {

                    window.frames[0].saveForm();
                },
                cancel: function (index) {

                }
            });
        }
         function iframe1(title, width, height, url) {
            layer.open({
                type: 2,
                title: title,
                shadeClose: true,
                shade: 0.7,
                area: [width, height],
                content: url,
                btn: ["关闭"],

                cancel: function (index) {

                },
                end: function (index) {

                    
                }
            });
        }
          function iframeWithBtns(title, width, height, url, isParent, func) {
                var options = {
                    skin: 'layui-ext-skin01',
                    type: 2,
                    title: title,
                    shadeClose: false,
                    closeBtn: 0,
                    shade: 0.7,
                    area: [width, height],
                    content: url,
                    btn: ['提交', '取消'],
                    yes: function (index, layero) {
                        func(index, layero);
                    },
                    cancel: function () { }
                };
                if (isParent === true) {
                    parent.layer.open(
                        options
                    );
                } else {
                    layer.open(options);
                }
            }
    </script>
</body>
</html>