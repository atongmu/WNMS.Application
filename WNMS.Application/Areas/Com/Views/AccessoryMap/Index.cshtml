
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <link rel="stylesheet" href="/css/iconfont.css">
    <link href="~/css/hyl.css" rel="stylesheet" />
    <link href="~/css/bootstrap.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/zlw.css">

    <link rel="stylesheet" href="~/css/anniu.css">
    <link rel="stylesheet" href="~/css/font-awesome.min.css">
    <link href="~/lib/layer/layer.css" rel="stylesheet" />
    <link href="~/css/ztreefont.css" rel="stylesheet" />
    <link href="~/css/iconfont.css" rel="stylesheet" />
    <script src="~/js/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>

    <script src="~/lib/layer/layer.js"></script>
    <link rel="stylesheet" href="../../css/ziti.css">
    <link rel="stylesheet" href="../../css/gdmap.css">
    <!-- 高德地图 -->
    <script src="//a.amap.com/jsapi_demos/static/china.js"></script>
    @*<script src="https://webapi.amap.com/maps?v=1.4.15&key=28068084e71b4dac1344e8d5c9451629&plugin=AMap.DistrictSearch,AMap.MarkerClusterer"></script>*@
    <script src="https://webapi.amap.com/maps?v=1.4.15&key=19f27b47f69a7be7890be2210d59ff6f&plugin=AMap.DistrictSearch,AMap.MarkerClusterer"></script>
    <style>
        .chaochu {
            padding-left: 20px !important;
        }

        .icon-bengfang {
            top: -2px !important
        }

        .maplist li span {
            width: 20%;
            font-size: 12px;
            float: left;
            text-align: center;
        }

        .orangeColor {
            background: linear-gradient(0deg, #e89f43 0%, #f5c060 56%);
        }

        .round div {
            background: #f7951d;
        }

        .orange {
            color: #f7951d;
        }

        .bgRed {
            background: linear-gradient(0deg, rgb(234, 180, 25) 0%, rgb(255, 198, 71) 56%);
        }

        .iconfont {
            font-size: 14px;
        }
        /*.custom-input-card {
            width: 18rem;
        }

            .custom-input-card .btn:last-child {
                margin-left: 1rem;
            }

        .content-window-card {
            position: relative;
            width: 23rem;
            padding: 0.75rem 0 0 1.25rem;
            box-shadow: none;
            bottom: 0;
            left: 0;
        }


            .chaochu i {
                display: inline-block;
                width: 8px;
                height: 8px;
                border-radius: 10px;
                margin-right: 6px;
                background: #0fd10a
            }

        .ls {
            background: #0fd10a !important
        }

        .hs {
            background: #ff0202 !important
        }

        .huis {
            background: #666 !important
        }

        .content-window-card p {
            height: 2rem;
        }

        .clearfloat:after {
            content: "";
            display: block;
            height: 0;
            clear: both;
            visibility: hidden;
        }

        .clearfloat {
            zoom: 1;
        }*/
    </style>
</head>
<body>
    <div class="zlw_control">
        <div class="zlw_controlcon">
            <div class="zlw_controlconlf">
                <div class="zlw_controlconlf_nr">
                    <!-- 点击按钮 -->
                    <div class="zlw-content-lfdj"></div>
                    <div class="zlw_controlconlf_nryi">
                        <div class="zlw_controlconlf_nryicon">
                            <i class="glyphicon glyphicon-search" onclick="LoadStationList()"></i>

                            <input id="stationName" type="text" placeholder="搜索泵房" class="zlw-ssk" autocomplete="off">
                        </div>
                    </div>
                    <div class="zlw_controlconlf_nrer">
                        <div class="zlw-tree pt5px">
                            <ul class="sxt_list" id="dataList">
                                @{
                                    var stationSates = ViewBag.stationState as IEnumerable<dynamic>;
                                    if (stationSates.Count() > 0)
                                    {
                                        var States = stationSates.ToList();
                                        for (var i = 0; i < States.Count; i++)
                                        {
                                          
                                                <li data-key="@States[i].StationID" data-state="@States[i].state">
                                                    <em class="iconfont icon-bengfang"></em>
                                                    <span class="chaochu">@States[i].StationName</span>

                                                </li>
                                            
                                        }
                                    }
                                }

                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <div class="zlw_controlconrg">
                <div class="left-icon"></div>
                <div class="zlw_controlconrgcon" style="padding:0">
                    
                        <div class="zlw_map_layer">
                            <div id="map_monitor"></div>
                        </div>
                        
                    </div>
                </div>
        </div>
    </div>
    <script type="text/javascript">
         var map;
        var markers = [];
        var markerClusterer;
        var mapselect;
        var infoWindow;
        var clusters;
        var areaname = '@Html.Raw(@ViewBag.AreaName)';
        var _renderClusterMarker;
        $(function () {
              // 点击按钮门禁左侧宽度为0
            $(".zlw-content-lfdj").click(function () {
                $(".zlw-content-lfdj").hide();
                $(".left-icon").css("display", "block");
                $(".zlw_controlconlf").css({ "width": "0", "padding": "0" });
                $(".zlw_controlconrg").css("width", "100%");
            });
            $(".left-icon").click(function () {
                $(".zlw-content-lfdj").fadeIn();
                $(".left-icon").css("display", "none");
                $(".zlw_controlconlf").css({ "width": "220px", "padding": "0px" });
                $(".zlw_controlconrg").css("width", "calc(100% - 220px)");
            })
            $(document).on('click', '.sxt_list li', function () {
                $(this).addClass('on').siblings('li').removeClass('on');
                var stationid = $(this).data("key");
                var stationname = $(this).find("span").text();
                var statedata=$(this).data("state");
                MapPosition(statedata,stationname,stationid);
               
                
            });
               //左侧树查询回车事件
            $("#stationName").keydown(function(e) {  
           if (e.keyCode == 13) {  
               LoadStationList();
               return false;
           }  
        }); 
            initMap();
            LoadZoom();
        })
         //左侧泵房查询
        function LoadStationList() {
            var searchText = $("#stationName").val();
           
                $.post("/Com/AccessoryMap/SearchStationList", { stationName: searchText }, function (res) {
                    $("#dataList").empty();
                    if (res.data.length > 0) {
                        var appends = "";
                        var States = res.data;
                        for (var i = 0; i < States.length; i++) {
                           
                                
                                 appends += ' <li   data-key="'+States[i].StationID+'">' +
                                    '<em class="iconfont icon-bengfang"></em>' +
                                    '<span class="chaochu">' + States[i].StationName + '</span>' +
                                   
                                    '</li>';
                           

                        }
                         $("#dataList").html(appends);
                    }
                    
                })
            
        }


         //地图初始化
          function initMap() {  
            map = new AMap.Map('map_monitor', {
                resizeEnable: true,
                //zoom: 11,
                zoom: @ViewBag.zoom,
                mapStyle: 'amap://styles/d363428cd7ab3d540fc2e80d22c5ea80', //设置地图的显示样式
                //center: ["118.380003", "35.198453"],
                center: [@ViewBag.lng, @ViewBag.lat],
                layers: [//使用多个图层
                    //  new AMap.TileLayer.Satellite(),
                    //  new AMap.TileLayer.RoadNet()
                ],
                zooms: [6, 14],//设置地图级别范围
            });
            mapselect = new AMap.DistrictSearch({
                extensions: 'all',
                subdistrict: 0
            }).search(areaname, function (status, result) {
                // 外多边形坐标数组和内多边形坐标数组
                var outer = [
                    new AMap.LngLat(-360, 90, true),
                    new AMap.LngLat(-360, -90, true),
                    new AMap.LngLat(360, -90, true),
                    new AMap.LngLat(360, 90, true),
                ];
                var holes = result.districtList[0].boundaries

                var pathArray = [
                    outer
                ];
                pathArray.push.apply(pathArray, holes)
               
                var polygon = new AMap.Polygon({
                    pathL: pathArray,
                    strokeColor: '#0168bc',
                    strokeWeight: 5,
                    fillColor: '#00080e',
                    fillOpacity: 0.7
                });


                polygon.setPath(pathArray);
                map.add(polygon)
            })

            //拖动获取设备信息
            AMap.event.addListener(map, "zoomchange", function (e) {
                map.clearInfoWindow();
                LoadZoom();
            });
            //拖动获取设备信息
            AMap.event.addListener(map, "moveend", function (e) {
                //map.clearInfoWindow();
            });
            clusters = new AMap.MarkerClusterer(map, markers, {
                               
            });
        }
           //根据不同的地图级别获取方法
        function LoadZoom() {
            map.remove(markers);
            if (map.getZoom() > 10) {
                LoadZoomData(map.getZoom());
            } else {
                
                var markericon2 = "";
              
              
                 
                    $.post("/Com/AccessoryMap/SearchStationList", { stationName: "" }, function (res) {
                    markers = [];

                        for (var i = 0; i < res.data.length; i++) {
                            if (res.data[i].state > 0) {
                                 markericon2 = '' +
                    '<div>' +
                    '<div class="round">  ' +
                    '<div class="circle">' +
                    '<img src="../../images/bftb.png">' +
                    '</div> ' +
                    '<div class="circle_bottom animation "></div>' +
                    '<div class="circle_bottom2 animation2 "></div>' +
                    '</div>' +
                    '</div>';
                            }
                            else {
                                 markericon2 = '' +
                    '<div>' +
                    '<div class="zhengchang">  ' +
                    '<div class="circle">' +
                    '<img src="../../images/bftb.png">' +
                    '</div> ' +
                    '<div class="circle_bottom animation "></div>' +
                    '<div class="circle_bottom2 animation2 "></div>' +
                    '</div>' +
                    '</div>';

                            }

                             marker = new AMap.Marker({
                                    position: [res.data[i].Lng, res.data[i].Lat],
                                    offset: new AMap.Pixel(-32, -10),
                                    name: res.data[i].StationName,
                                    content: markericon2
                                });
                          
                            marker.id = res.data[i].StationID;
                            marker.state = res.data[i].state;
                            markers.push(marker);
                        }
                        var count = markers.length;
                         _renderClusterMarker = function (context) {
                            var factor = Math.pow(context.count / count, 1 / 18)
                            var div = document.createElement('div');
                            var Hue = 180 - factor * 180;
                            var bgColor = 'hsla(' + Hue + ',100%,50%,0.7)';
                            var fontColor = 'hsla(' + Hue + ',100%,20%,1)';
                            var borderColor = 'hsla(' + Hue + ',100%,40%,1)';
                            var shadowColor = 'hsla(' + Hue + ',100%,50%,1)';
                            div.style.backgroundColor = bgColor
                            var size = Math.round(30 + Math.pow(context.count / count, 1 / 5) * 20);
                            div.style.width = div.style.height = size + 'px';
                            div.style.border = 'solid 1px ' + borderColor;
                            div.style.borderRadius = size / 2 + 'px';
                            div.style.boxShadow = '0 0 1px ' + shadowColor;
                            div.innerHTML = context.count;
                            div.style.lineHeight = size + 'px';
                            div.style.color = fontColor;
                            div.style.fontSize = '14px';
                            div.style.textAlign = 'center';
                            context.marker.setOffset(new AMap.Pixel(-size / 2, -size / 2));
                            context.marker.setContent(div)
                        }
                        map.plugin('AMap.MarkerClusterer', function () {
                             if (clusters) {
                              clusters.setMap(null);//删除之前添加的markerCluster 
                              }
                             clusters = new AMap.MarkerClusterer(map, markers, {
                                gridSize: 80,
                                renderClusterMarker: _renderClusterMarker,
                                maxZoom: 10
                       });
                           
                        });
                    })
              
            }
        }
        function LoadZoomData(zoomlevel) {
            $.post("/Com/AccessoryMap/SearchStationList", { stationName: "" }, function (res) {
                
                //if (markers.length > 0) {
                //    for (var i = 0; i < markers.length; i++) {
                //        clusters.removeMarker(markers[i]);
                //        map.remove(markers[i]);
                //    }
                //}
               
                clusters.clearMarkers();
                map.remove(markers);
                markers = [];
                
                for (var i = 0; i < res.data.length; i++) {
                    var colorclass = "bgGreen";
                    if (res.data[i].state > 0) {
                        colorclass = "bgRed";
                    }
                    var markericon4 = '' +
                        '<div class="mapiconbox overflow  clearfloat '+colorclass+' zlwdb">' +
                        '<span class="left"><i class="iconfont f18px icon-bengfang white pl5px pr5px"></i></span><p class="left">'+res.data[i].StationName+'</p>' +
                        '</div>';
                   
                         marker = new AMap.Marker({
                                position: [res.data[i].Lng, res.data[i].Lat],
                                offset: new AMap.Pixel(-50, -1),
                                name: res.data[i].StationName,
                                content: markericon4

                         });
                    marker.id = res.data[i].StationID;
                    marker.state = res.data[i].state;
                    marker.name = res.data[i].StationName;
                        marker.on('mouseover', function (e) {
                            var id = this.id;

                            LoadStationData(this.state,this.name,id, e);
                        })
                        marker.on('mouseout', function (e) {
                            var id = this.id;
                            map.clearInfoWindow();
                        })
                        marker.on('dblclick', function (e) {
                            map.setZoomAndCenter(map.getZoom() + 1, e.target.getPosition());
                        })
                        map.add(marker);
                        markers.push(marker);

                }
            })

        }
         //弹出框数据加载
        function LoadStationData(state,stationname,id, e) {
            $.post("/Com/AccessoryMap/QueryAccessBYStationid", { stationid: id }, function (res) {

                var colordata = "green";
                if (state > 0) {
                    colordata = "orange";
                }
                    var table = '<div class="makercon overflow clearfloat pad10px">';
                    
                    table += "<div class='maptitle'><i class='iconfont f24px icon-bengfang "+colordata+"'></i><p><span class='fb f16px'>" + stationname + "</span></p></div>";
                    table += '<ul class="maplist">';
                    table += '<li class="maplistnr1" ><span>器件名称</span><span>器件编号</span><span>型号</span><span>设备名称</span><span>数量</span></li>';
                    if (res.data.length > 0) {
                        for (var i = 0; i < res.data.length; i++) {
                              var a_no = res.data[i].AccessoriesNo.length ==undefined  ? "--" : res.data[i].AccessoriesNo;
                            table += '<li><span>'+res.data[i].Name+'</span><span>'+a_no+'</span><span>'+res.data[i].Type+'</span><span>'+res.data[i].ItemName+'</span><span>'+res.data[i].quantity+'</span>';
                                     
                            table += '</li>'
                        }
                    }
                    table += '</ul><div class="sj"></div>';
                    infoWindow = new AMap.InfoWindow({
                        content: table , //使用默认信息窗体框样式，显示信息内容e.target.getPosition()
                        //offset: new AMap.Pixel(10, -10), //相对于基点的偏移位置
                    });
                    //infoWindow.open(map, [data.jk.lng, data.jk.lat]);
                    infoWindow.open(map, e.target.getPosition());
               
            })
        }
        function MapPosition(state,stationname,stationid) {
             $.post("/Com/AccessoryMap/QueryAccessBYStationid", { stationid: stationid }, function (res) {
               
                     var colordata = "green";
                     if (state > 0) {
                        colordata = "orange";
                     }
               
                    var table = '<div class="makercon overflow clearfloat pad10px">';
                    
                    table += "<div class='maptitle'><i class='iconfont f24px icon-bengfang "+colordata+"'></i><p><span class='fb f16px'>" + stationname + "</span></p></div>";
                    table += '<ul class="maplist">';
                    table += '<li class="maplistnr1" ><span>器件名称</span><span>器件编号</span><span>型号</span><span>设备名称</span><span>数量</span></li>';
                 
                    if (res.data.length > 0) {
                        for (var i = 0; i < res.data.length; i++) {
                           
                            var a_no = res.data[i].AccessoriesNo.length ==undefined  ? "--" : res.data[i].AccessoriesNo;
                             table += '<li><span>'+res.data[i].Name+'</span><span>'+a_no+'</span><span>'+res.data[i].Type+'</span><span>'+res.data[i].ItemName+'</span><span>'+res.data[i].quantity+'</span>';
                          
                            table += '</li>'
                        }
                    }
                    table += '</ul><div class="sj"></div>';
                    infoWindow = new AMap.InfoWindow({
                        content: table , //使用默认信息窗体框样式，显示信息内容e.target.getPosition()
                        //offset: new AMap.Pixel(10, -10), //相对于基点的偏移位置
                    });
                    //infoWindow.open(map, [data.jk.lng, data.jk.lat]);
                 infoWindow.open(map, [res.data[0].Lng, res.data[0].Lat]);
                 map.panTo([res.data[0].Lng, res.data[0].Lat]);
               
            })
        }


    </script>
</body>
</html>
