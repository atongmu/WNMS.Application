/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import{J as s}from"../../chunks/jsonMap.js";import{a as t}from"../../chunks/JSONSupport.js";import{property as r}from"../../core/accessorSupport/decorators/property.js";import"../../core/lang.js";import"../../chunks/ensureType.js";import{subclass as o}from"../../core/accessorSupport/decorators/subclass.js";import i from"../../geometry/Polygon.js";import"../../chunks/object.js";import"../../core/Accessor.js";import"../../chunks/deprecate.js";import"../../chunks/Logger.js";import"../../config.js";import"../../chunks/string.js";import"../../chunks/metadata.js";import"../../chunks/handleUtils.js";import"../../chunks/ArrayPool.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../core/promiseUtils.js";import"../../core/Error.js";import"../../chunks/writer.js";import"../../geometry/Extent.js";import"../../geometry/Geometry.js";import"../../chunks/reader.js";import"../../geometry/SpatialReference.js";import"../../geometry/Point.js";import"../../core/accessorSupport/decorators/cast.js";import"../../geometry/support/webMercatorUtils.js";import"../../chunks/Ellipsoid.js";import"../../chunks/extentUtils.js";import"../../chunks/zmUtils.js";const n=new s({preserveShape:"preserve-shape",planar:"planar",geodesic:"geodesic"}),p=new s({esriAcres:"acres",esriHectares:"hectares",esriSquareMiles:"square-miles",esriSquareKilometers:"square-kilometers",esriSquareMeters:"square-meters",esriSquareFeet:"square-feet",esriSquareYards:"square-yards",esriAres:"ares"}),a=new s({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});let c=class extends t{constructor(e){super(e),this.areaUnit=null,this.calculationType=null,this.lengthUnit=null,this.polygons=null}toJSON(){const e={};if(this.polygons&&this.polygons.length>0){const s=this.polygons.map((function(e){return e.toJSON()}));e.polygons=JSON.stringify(s);const t=this.polygons[0].spatialReference;e.sr=t.wkid?t.wkid:JSON.stringify(t.toJSON())}if(this.lengthUnit&&(e.lengthUnit=a.toJSON(this.lengthUnit)),this.areaUnit){const s=p.toJSON(this.areaUnit);e.areaUnit="string"==typeof s?JSON.stringify({areaUnit:s}):s}return this.calculationType&&(e.calculationType=n.toJSON(this.calculationType)),e}};e([r({type:String,json:{write:!0}})],c.prototype,"areaUnit",void 0),e([r({type:String,json:{write:!0}})],c.prototype,"calculationType",void 0),e([r({type:String,json:{write:!0}})],c.prototype,"lengthUnit",void 0),e([r({type:[i],json:{write:!0}})],c.prototype,"polygons",void 0),c=e([o("esri.rest.support.AreasAndLengthsParameters")],c);const l=c;export{l as default};
