/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as r}from"../chunks/tslib.es6.js";import{clone as t}from"../core/lang.js";import{n as o}from"../chunks/string.js";import{property as s}from"../core/accessorSupport/decorators/property.js";import"../chunks/ensureType.js";import{e}from"../chunks/enumeration.js";import{r as i}from"../chunks/reader.js";import{subclass as p}from"../core/accessorSupport/decorators/subclass.js";import{w as m}from"../chunks/writer.js";import{collectArcadeFieldNames as n}from"../layers/support/fieldUtils.js";import a from"./Symbol.js";import"../chunks/object.js";import"../chunks/Logger.js";import"../config.js";import"../chunks/metadata.js";import"../chunks/handleUtils.js";import"../chunks/jsonMap.js";import"../core/Error.js";import"../chunks/arcadeOnDemand.js";import"../geometry.js";import"../geometry/Extent.js";import"../geometry/Geometry.js";import"../chunks/JSONSupport.js";import"../core/Accessor.js";import"../chunks/deprecate.js";import"../chunks/ArrayPool.js";import"../core/scheduling.js";import"../chunks/nextTick.js";import"../core/promiseUtils.js";import"../geometry/SpatialReference.js";import"../geometry/Point.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/support/webMercatorUtils.js";import"../chunks/Ellipsoid.js";import"../geometry/Multipoint.js";import"../chunks/zmUtils.js";import"../geometry/Polygon.js";import"../chunks/extentUtils.js";import"../geometry/Polyline.js";import"../chunks/typeUtils.js";import"../geometry/support/jsonUtils.js";import"../Color.js";import"../chunks/colorUtils.js";import"../chunks/mathUtils.js";import"../chunks/common.js";var c;let l=c=class extends a{constructor(r){super(r),this.data=null,this.type="cim"}readData(r,t){return t}writeData(r,t){if(r)for(const o in r)t[o]=r[o]}async collectRequiredFields(r,t){if("CIMSymbolReference"===this.data.type){const o=this.data.primitiveOverrides;if(o){const s=o.map((o=>{const s=o.valueExpressionInfo;return n(r,t,s.expression)}));await Promise.all(s)}}}clone(){return new c({data:t(this.data)})}hash(){return o(JSON.stringify(this.data)).toString()}};r([s({json:{write:!1}})],l.prototype,"color",void 0),r([s({json:{write:!0}})],l.prototype,"data",void 0),r([i("data",["symbol"])],l.prototype,"readData",null),r([m("data",{})],l.prototype,"writeData",null),r([e({CIMSymbolReference:"cim"},{readOnly:!0})],l.prototype,"type",void 0),l=c=r([p("esri.symbols.CIMSymbol")],l);const j=l;export{j as default};
