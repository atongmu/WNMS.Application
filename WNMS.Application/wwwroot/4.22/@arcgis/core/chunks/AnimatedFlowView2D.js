/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import t from"../core/Accessor.js";import{property as r}from"../core/accessorSupport/decorators/property.js";import{i as s,b as i}from"../core/lang.js";import"./ensureType.js";import{subclass as n}from"../core/accessorSupport/decorators/subclass.js";import{l as a}from"./dataUtils.js";import{B as o}from"./brushes.js";import{W as l}from"./enums.js";import{W as d}from"./WGLContainer.js";import"../geometry.js";import{L as h}from"./Logger.js";import{o as c}from"./mathUtils.js";import{isAbortError as p,throwIfAborted as m}from"../core/promiseUtils.js";import g from"../geometry/Point.js";import{a as y,b as u,e as _,r as f}from"./mat3.js";import{c as x}from"./mat3f32.js";import{D as S}from"./DisplayObject.js";import w from"../geometry/Extent.js";import{a as D}from"./screenUtils.js";import{B as v,V as j}from"./Program.js";import"./FramebufferObject.js";import"./Texture.js";class R extends d{constructor(){super(...arguments),this.flowStyle=null}get requiresDedicatedFBO(){return!1}doRender(e){super.doRender(e)}prepareRenderPasses(e){const t=e.registerRenderPass({name:"flow",brushes:[o],target:()=>this.children,drawPhase:l.MAP});return[...super.prepareRenderPasses(e),t]}}const b=h.getLogger("esri.views.2d.engine.flow.FlowDisplayData");class C{constructor(e,t,r,s){this.state={name:"created"},this.flowStyle=e,this.extent=t,this.size=r,this.pixelRatio=s}async load(){const e=new AbortController;this.state={name:"loading",abortController:e};const t=await this.flowStyle.loadResources({extent:this.extent,size:this.size,pixelRatio:this.pixelRatio},e.signal);this.state={name:"loaded",resources:t}}prepareForRendering(e,t,r){if("loaded"!==this.state.name)return void b.error("Only loaded resources can be attached.");const s=this.state.resources;s.prepareForRendering(e,t,r),this.state={name:"attached",resources:s}}destroy(){if("loading"===this.state.name)return this.state.abortController.abort(),void(this.state={name:"detached"});"attached"===this.state.name&&(this.state.resources.detach(),this.state={name:"detached"})}update(e){if(!this.flowStyle.areResourcesCompatible(e.flowStyle))return!1;return!(!this.extent.equals(e.extent)||this.size[0]!==e.size[0]||this.size[1]!==e.size[1]||this.pixelRatio!==e.pixelRatio)&&(this.flowStyle=e.flowStyle,!0)}}class L extends S{constructor(){super(...arguments),this._displayData=null}get displayData(){return this._displayData}set displayData(e){this._displayData=e,this.requestRender()}clear(){s(this._displayData)&&(this._displayData.destroy(),this._displayData=null,this.requestRender())}setTransform(e){const{displayData:t}=this;if(i(t))return;const r=t.extent.xmin,s=t.extent.ymax,n=[0,0];e.toScreen(n,[r,s]);const a=(t.extent.xmax-t.extent.xmin)/t.size[0]/e.resolution,o=c(e.rotation),{dvs:l}=this.transforms;y(l),u(l,l,[-1,1,0]),_(l,l,[2/(e.size[0]*e.pixelRatio),-2/(e.size[1]*e.pixelRatio),1]),u(l,l,[n[0],n[1],0]),f(l,l,o),_(l,l,[a*e.pixelRatio,a*e.pixelRatio,1])}_createTransforms(){return{dvs:x()}}}const M=h.getLogger("esri.views.2d.engine.flow.FlowStrategy");let A=class extends t{constructor(e){super(e),this._flowDisplayObject=new L,this._loading=null}initialize(){this.flowContainer.addChild(this._flowDisplayObject)}destroy(){this._clear(),this.flowContainer.removeAllChildren()}get updating(){return null!=this._loading}update(e){const{flowStyle:t}=this.flowContainer;if(i(t))return void this._clear();const{extent:r,rotation:n,resolution:a,pixelRatio:o}=e.state,l=function(e,t){const r=new g({x:(e.xmax+e.xmin)/2,y:(e.ymax+e.ymin)/2,spatialReference:e.spatialReference}),s=e.xmax-e.xmin,i=e.ymax-e.ymin,n=Math.abs(Math.cos(c(t))),a=Math.abs(Math.sin(c(t))),o=n*s+a*i,l=a*s+n*i,d=new w({xmin:r.x-o/2,ymin:r.y-l/2,xmax:r.x+o/2,ymax:r.y+l/2,spatialReference:e.spatialReference});return d.centerAt(r),d}(r,n);l.expand(1.15);const d=[Math.round((l.xmax-l.xmin)/a),Math.round((l.ymax-l.ymin)/a)],h=new C(t,l,d,o);if(s(this._loading)){if(this._loading.update(h))return;this._loading.destroy(),this._loading=null}!i(this._flowDisplayObject.displayData)&&this._flowDisplayObject.displayData.update(h)||(h.load().then((()=>{this._flowDisplayObject.clear(),this._flowDisplayObject.displayData=this._loading,this._loading=null}),(e=>{p(e)||(M.error("A resource failed to load.",e),this._loading=null)})),this._loading=h)}_clear(){this._flowDisplayObject.clear(),s(this._loading)&&(this._loading.destroy(),this._loading=null)}};e([r()],A.prototype,"_loading",void 0),e([r()],A.prototype,"flowContainer",void 0),e([r()],A.prototype,"updating",null),A=e([n("esri.views.2d.engine.flow.FlowStrategy")],A);const z=A;class O{constructor(e,t){this._vertexData=e,this._indexData=t}prepareForRendering(e,t,r){const s=v.createVertex(e,35044,this._vertexData),i=v.createIndex(e,35044,this._indexData),n=new j(e,t,r,{geometry:s},i);this.vertexBuffer=s,this.indexBuffer=i,this.vertexArray=n,this._vertexData=null,this._indexData=null}detach(){this.vertexArray.dispose(),this.vertexBuffer.dispose(),this.indexBuffer.dispose()}}class T{constructor(e,t,r){this._loadImagery=e,this._createStreamlinesMesh=t,this._rendererSettings=function(e){const t=D(e.lineWidth),r=2*t,s=Math.round(D(e.lineLength)/r)+1,i=t,n=e.lineColor.toRgba(),a=[n[0]/255,n[1]/255,n[2]/255,n[3]],{lineSpeed:o,fadeDuration:l,density:d}=e;return{lineRenderWidth:t,segmentLength:r,verticesPerLine:s,lineCollisionWidth:i,lineSpacing:10,lineColor:a,lineSpeed:o,fadeDuration:l,density:d,smoothing:D(e.smoothing),velocityScale:1,minWeightThreshold:.001,minSpeedThreshold:.001,maxTurnAngle:1,mergeLines:!0,interpolate:!0,profile:!1}}(r)}get animated(){return this._rendererSettings.lineSpeed>0}get renderSettings(){return this._rendererSettings}areResourcesCompatible(e){let t=!0;return t=t&&e._loadImagery===this._loadImagery,t=t&&e._createStreamlinesMesh===this._createStreamlinesMesh,t=t&&e._rendererSettings.verticesPerLine===this._rendererSettings.verticesPerLine,t=t&&e._rendererSettings.segmentLength===this._rendererSettings.segmentLength,t=t&&e._rendererSettings.lineSpacing===this._rendererSettings.lineSpacing,t=t&&e._rendererSettings.density===this._rendererSettings.density,t=t&&e._rendererSettings.smoothing===this._rendererSettings.smoothing,t=t&&e._rendererSettings.velocityScale===this._rendererSettings.velocityScale,t=t&&e._rendererSettings.minWeightThreshold===this._rendererSettings.minWeightThreshold,t=t&&e._rendererSettings.minSpeedThreshold===this._rendererSettings.minSpeedThreshold,t=t&&e._rendererSettings.mergeLines===this._rendererSettings.mergeLines,t=t&&e._rendererSettings.interpolate===this._rendererSettings.interpolate,t&&this._rendererSettings.mergeLines&&(t=e._rendererSettings.lineCollisionWidth===this._rendererSettings.lineCollisionWidth),!!t}async loadResources(e,t){const{extent:r,size:s}=e;m(t);const i=await this._loadImagery(r,s[0],s[1],t),{vertexData:n,indexData:a}=await this._createStreamlinesMesh(this._rendererSettings,i,t);return new O(n,a)}}let W=class extends t{constructor(){super(...arguments),this._loadImagery=(e,t,r,s)=>a(this.layer,e,t,r,s),this._createStreamlinesMesh=(e,t,r)=>this.layer.createStreamlinesMesh({flowData:t,rendererSettings:e},{signal:r}),this.container=null,this.layer=null,this.type="rasterAnimatedFlow",this.redrawOrRefetch=async()=>{this._rendererChanged()}}get updating(){return!this._strategy||this._strategy.updating}update(e){e.stationary?this._strategy.update(e):this.layerView.requestUpdate()}install(e){this.container=new R,e.addChild(this.container),this._strategy=new z({flowContainer:this.container}),this._rendererChanged()}uninstall(){this._strategy.destroy(),this.container.removeAllChildren(),this.container.remove()}moveEnd(){}async doRefresh(){}attach(){}_rendererChanged(){if("animated-flow"!==this.layer.renderer.type)return;const e=new T(this._loadImagery,this._createStreamlinesMesh,this.layer.renderer);this.container.flowStyle=e,this.layerView.requestUpdate()}};e([r()],W.prototype,"_strategy",void 0),e([r()],W.prototype,"container",void 0),e([r()],W.prototype,"layer",void 0),e([r()],W.prototype,"layerView",void 0),e([r()],W.prototype,"type",void 0),e([r()],W.prototype,"updating",null),W=e([n("esri.views.2d.engine.flow.AnimatedFlowView2D")],W);const F=W;export{F as A};
