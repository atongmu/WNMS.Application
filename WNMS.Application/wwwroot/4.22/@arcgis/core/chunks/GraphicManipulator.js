/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import t from"../core/Accessor.js";import{E as i}from"./Evented.js";import{b as s,i as o}from"../core/lang.js";import{a as r,s as l,b as a}from"./screenUtils.js";import{property as n}from"../core/accessorSupport/decorators/property.js";import"./ensureType.js";import{subclass as h}from"../core/accessorSupport/decorators/subclass.js";import{a as c}from"./vec2.js";import{E as p,b as m}from"./mathUtils.js";import{canProjectWithoutEngine as y,project as g,projectPointToVector as u}from"../geometry/projection.js";import{c as b}from"./elevationInfoUtils.js";import{g as d}from"../layers/support/LabelClass.js";import{E as f}from"./ElevationInfo.js";import{i as _}from"./drapedUtils.js";let S=class extends t{constructor(e){super(e),this.layer=null,this.interactive=!0,this.selectable=!1,this.grabbable=!0,this.dragging=!1,this.cursor=null,this.events=new i.EventEmitter,this._circleCollisionCache=null,this._graphicSymbolChangedHandle=null,this._originalSymbol=null}set graphic(e){this._circleCollisionCache=null,this._originalSymbol=e.symbol,this._set("graphic",e),this.attachSymbolChanged()}get elevationInfo(){const e="elevationInfo"in this.graphic.layer&&this.graphic.layer.elevationInfo,t=b(this.graphic),i=e?e.offset:0;return new f({mode:t,offset:i})}set focusedSymbol(e){e!==this._get("focusedSymbol")&&(this._set("focusedSymbol",e),this._updateGraphicSymbol(),this._circleCollisionCache=null)}grabbableForEvent(){return!0}set grabbing(e){e!==this._get("grabbing")&&(this._set("grabbing",e),this._updateGraphicSymbol())}set hovering(e){e!==this._get("hovering")&&(this._set("hovering",e),this._updateGraphicSymbol())}set selected(e){e!==this._get("selected")&&(this._set("selected",e),this._updateGraphicSymbol(),this.events.emit("select-changed",{action:e?"select":"deselect"}))}get _focused(){return this._get("hovering")||this._get("grabbing")}destroy(){this.detachSymbolChanged(),this._resetGraphicSymbol(),this._set("view",null)}intersectionDistance(e){const t=this.graphic;if(!1===t.visible)return null;const i=t.geometry;if(s(i))return null;const r=this._get("focusedSymbol"),l=o(r)?r:t.symbol;return"2d"===this.view.type?this._intersectDistance2D(this.view,e,i,l):this._intersectDistance3D(this.view,e,t)}attach(){this.attachSymbolChanged(),o(this.layer)&&this.layer.add(this.graphic)}detach(){this.detachSymbolChanged(),this._resetGraphicSymbol(),o(this.layer)&&this.layer.remove(this.graphic)}attachSymbolChanged(){this.detachSymbolChanged(),this._graphicSymbolChangedHandle=this.graphic.watch("symbol",(e=>{o(e)&&e!==this.focusedSymbol&&e!==this._originalSymbol&&(this._originalSymbol=e,this._focused&&o(this.focusedSymbol)&&(this.graphic.symbol=this.focusedSymbol))}),!0)}detachSymbolChanged(){o(this._graphicSymbolChangedHandle)&&(this._graphicSymbolChangedHandle.remove(),this._graphicSymbolChangedHandle=null)}_updateGraphicSymbol(){this.graphic.symbol=this._focused&&o(this.focusedSymbol)?this.focusedSymbol:this._originalSymbol}_resetGraphicSymbol(){this.graphic.symbol=this._originalSymbol}_intersectDistance2D(e,t,i,a){if(a=a||d(i),s(a))return null;let n=this._circleCollisionCache;if("point"!==i.type||"simple-marker"!==a.type)return _(t,i,e)?1:null;if(s(n)||!n.originalPoint.equals(i)){const t=i,s=e.spatialReference;if(y(t.spatialReference,s)){const e=g(t,s);n={originalPoint:t.clone(),mapPoint:e,radiusPx:r(a.size)},this._circleCollisionCache=n}}if(o(n)){const i=l(t,C),s=e.toScreen(n.mapPoint),o=n.radiusPx,h=s.x+r(a.xoffset),p=s.y-r(a.yoffset);return c(i,[h,p])<o*o?1:null}return null}_intersectDistance3D(e,t,i){const s=e.toMap(t,{include:[i]});return s&&u(s,v,e.renderSpatialReference)?p(v,e.state.camera.eye):null}};e([n({constructOnly:!0,nonNullable:!0})],S.prototype,"graphic",null),e([n({readOnly:!0})],S.prototype,"elevationInfo",null),e([n({constructOnly:!0,nonNullable:!0})],S.prototype,"view",void 0),e([n({value:null})],S.prototype,"focusedSymbol",null),e([n({constructOnly:!0})],S.prototype,"layer",void 0),e([n()],S.prototype,"interactive",void 0),e([n()],S.prototype,"selectable",void 0),e([n()],S.prototype,"grabbable",void 0),e([n({value:!1})],S.prototype,"grabbing",null),e([n()],S.prototype,"dragging",void 0),e([n()],S.prototype,"hovering",null),e([n({value:!1})],S.prototype,"selected",null),e([n()],S.prototype,"cursor",void 0),S=e([h("esri.views.interactive.GraphicManipulator")],S);const v=m(),C=a();export{S as G};
