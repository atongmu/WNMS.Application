/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as t}from"./tslib.es6.js";import e from"../core/Accessor.js";import{clone as r,V as s,e as o,b as i,i as n}from"../core/lang.js";import{s as a}from"./screenUtils.js";import{property as c}from"../core/accessorSupport/decorators/property.js";import"./ensureType.js";import{subclass as p}from"../core/accessorSupport/decorators/subclass.js";import{U as l,d,f as m,n as y,g as u,b as h}from"./mathUtils.js";import{g as f,c as v,a as g,e as w}from"./ray.js";import{c as j}from"./vectorStacks.js";import{g as I}from"./dehydratedFeatures.js";import{i as R,b,t as U}from"./intersectorUtilsConversions.js";import{a as O}from"./ray2.js";import{t as S}from"./tileUtils.js";import{n as C}from"./Intersector.js";var _;let x=_=class extends e{constructor(t){super(t)}clone(){return new _({type:this.type,id:r(this.id),point:r(this.point),normal:r(this.normal),ray:r(this.ray)})}equals(t){return this.type===t.type&&this.id===t.id&&s(this.point,t.point)&&o(this.normal,t.normal)&&f(this.ray,t.ray)}};t([c()],x.prototype,"type",void 0),t([c({constructOnly:!0})],x.prototype,"id",void 0),t([c({constructOnly:!0})],x.prototype,"point",void 0),t([c({constructOnly:!0})],x.prototype,"normal",void 0),t([c({constructOnly:!0})],x.prototype,"ray",void 0),x=_=t([p("esri.views.3d.analysis.LineOfSight.LineOfSightIntersectionResult")],x);let L=class extends e{constructor(t){super(t)}initialize(){this.intersector=C(this.view.state.viewingMode),this.intersector.options.hud=!1,this.intersector.options.store=0}getScreenPointIntersection(t){const e=a(t,j.get()),r=O(this.view.state.camera,e,A);return this._getRayIntersection(r)}_getRayIntersection(t){if(i(t))return null;this.view.sceneIntersectionHelper.intersectToolIntersectorRay(t,this.intersector);const e=this.intersector.results.min;if(!e.getIntersectionPoint(F))return null;const r=this.view.renderCoordsHelper.fromRenderCoords(F,this.view.spatialReference),s=l(e.normal),o=d(s,t.direction)>0?-1:1;if(m(s,s,o),R(e))return new x({type:0,id:`${e.target.layerUid}/${e.target.nodeIndex}/${e.target.componentIndex}`,point:r,normal:s,ray:g(t)});if(b(e))return new x({type:2,id:e.target.lij.slice(),point:r,normal:s,ray:g(t)});const a=U(e,this.view);if(n(a)){const e=a.layer,o=a.sourceLayer;let i;if(o)if("scene"===o.type)i=I(a,o.objectIdField);else i=a.uid;else i=a.uid;return new x({type:0,id:`${e.uid}/${i}`,point:r,normal:s,ray:g(t)})}return null}_canUpdateFromIntersectionResult(t,e){if(i(t)||!e||t.type!==e.type)return!1;switch(t.type){case 2:{const r=t.id,s=e.id;return r[0]===s[0]&&r[1]===s[1]&&r[2]===s[2]||S(r,s)}case 0:case 4:return t.id===e.id}}updateFromIntersectionResult(t){let e;if(2===t.type&&n(t.point)){const r=F,s=H,o=$;this.view.renderCoordsHelper.toRenderCoords(t.point,s),this.view.renderCoordsHelper.worldUpAtPosition(s,o);const i=this.view.basemapTerrain.elevationBounds,n=this.view.renderCoordsHelper.getAltitude(s),a=i?Math.abs(i.max-i.min)/Math.abs(n):100,c=n>0?1:-1;y(o,o),m(o,o,c*a),u(r,s,o),w(r,s,A),e=this._getRayIntersection(A)}else e=this._getRayIntersection(t.ray);return this._canUpdateFromIntersectionResult(e,t)?e.point:null}};t([c()],L.prototype,"view",void 0),t([c()],L.prototype,"intersector",void 0),L=t([p("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],L);const F=h(),H=h(),$=h(),A=v();export{L};
