/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import e from"../../Viewpoint.js";import o from"../../core/Collection.js";import i from"../../core/Error.js";import{E as r}from"../../chunks/Evented.js";import{L as s}from"../../chunks/Logger.js";import{i as n}from"../../core/lang.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import{cast as c}from"../../core/accessorSupport/decorators/cast.js";import{subclass as m}from"../../core/accessorSupport/decorators/subclass.js";import{T as p}from"../../chunks/Thumbnail2.js";import l from"../../webmap/Bookmark.js";import{G as u}from"../../chunks/GoTo.js";import"../../Camera.js";import"../../chunks/JSONSupport.js";import"../../core/Accessor.js";import"../../chunks/deprecate.js";import"../../chunks/metadata.js";import"../../chunks/handleUtils.js";import"../../chunks/ArrayPool.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../core/promiseUtils.js";import"../../chunks/object.js";import"../../config.js";import"../../chunks/string.js";import"../../chunks/ensureType.js";import"../../chunks/mathUtils.js";import"../../chunks/common.js";import"../../chunks/reader.js";import"../../chunks/writer.js";import"../../geometry/Point.js";import"../../geometry/Geometry.js";import"../../geometry/SpatialReference.js";import"../../geometry/support/webMercatorUtils.js";import"../../chunks/Ellipsoid.js";import"../../chunks/mathUtils2.js";import"../../geometry.js";import"../../geometry/Extent.js";import"../../geometry/Multipoint.js";import"../../chunks/zmUtils.js";import"../../geometry/Polygon.js";import"../../chunks/extentUtils.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import"../../chunks/jsonMap.js";import"../../geometry/support/jsonUtils.js";import"../../chunks/shared.js";import"../../TimeExtent.js";import"../../chunks/timeUtils.js";import"../../chunks/Identifiable.js";const k="esri.widgets.Bookmarks.BookmarksViewModel",h=s.getLogger(k),d=o.ofType(l),j={width:128,height:128,format:"png"},w={takeScreenshot:!0,captureViewpoint:!0,captureRotation:!0,captureScale:!0,captureTimeExtent:!0},v={time:!0};let g=class extends(u(r.EventedAccessor)){constructor(t){super(t),this.abilities={...v},this.activeBookmark=null}destroy(){this.view=null,this._set("activeBookmark",null)}castAbilities(t){return{...v,...t}}set bookmarks(t){void 0!==t?this._override("bookmarks",t):this._clearOverride("bookmarks")}get bookmarks(){return this.get("view.map.bookmarks")||new d}set defaultCreateOptions(t){this._set("defaultCreateOptions",{...w,...t})}get defaultCreateOptions(){return w}set defaultEditOptions(t){this._set("defaultEditOptions",{...w,...t})}get defaultEditOptions(){return w}get state(){const t=this.get("view");return t&&!t.ready?"loading":"ready"}get view(){return this._get("view")}set view(t){t&&"2d"!==t.type&&h.error(new i("view:invalid-view","SceneView is not supported",{view:t})),this._set("view",t)}async createBookmark(t){const{view:e,defaultCreateOptions:o,abilities:r}=this;if(!e){const t=new i("create-bookmark:invalid-view","Cannot create a bookmark without a view.");return h.error(t),Promise.reject(t)}const{takeScreenshot:s,screenshotSettings:a,captureViewpoint:c,captureRotation:m,captureScale:p,captureTimeExtent:u}={...o,...t},k=s?await this._createThumbnail(a):void 0,d=r.time&&u&&n(e.timeExtent)?e.timeExtent.clone():void 0;return new l({...k&&{thumbnail:k},...u&&{timeExtent:d},...c&&{viewpoint:this._createViewpoint({view:e,captureScale:p,captureRotation:m})}})}async editBookmark(t,e){const{view:o,defaultEditOptions:r}=this;if(!o){const t=new i("edit-bookmark:invalid-view","Cannot edit a bookmark without a view.");return h.error(t),Promise.reject(t)}const{takeScreenshot:s,screenshotSettings:a,captureViewpoint:c,captureRotation:m,captureScale:p,captureTimeExtent:l}={...r,...e},u=s?await this._createThumbnail(a):void 0;return u&&(t.thumbnail=u),c&&(t.viewpoint=this._createViewpoint({view:o,captureScale:p,captureRotation:m})),l&&n(o.timeExtent)&&(t.timeExtent=o.timeExtent.clone()),this.emit("bookmark-edit",{bookmark:t}),t}goTo(t){const{abilities:e,view:o}=this;if(!o){const t=new i("go-to:invalid-view","Cannot go to a bookmark without a view");return h.error(t),Promise.reject(t)}const r=null==t?void 0:t.viewpoint;if(!r){const e=new i("go-to:invalid-bookmark","Cannot go to a bookmark that does not contain a 'viewpoint'.",{bookmark:t});return h.error(e),Promise.reject(e)}this._set("activeBookmark",t);const s={target:r},n=this.callGoTo(s),a=null==t?void 0:t.timeExtent;return e.time&&a&&(o.timeExtent=a),this.emit("bookmark-select",{bookmark:t}),n.catch((()=>{})).then((()=>this._set("activeBookmark",null))),n}async _createThumbnail(t){const e=await this.view.takeScreenshot({...j,...t});return new p({url:e.dataUrl})}_createViewpoint({view:t,captureRotation:o,captureScale:i}){var r,s;const n=null==(r=t.viewpoint)?void 0:r.clone();return new e({targetGeometry:null==(s=t.extent)?void 0:s.clone(),rotation:o&&(null==n?void 0:n.rotation)||0,scale:i&&(null==n?void 0:n.scale)||0})}};t([a()],g.prototype,"abilities",void 0),t([c("abilities")],g.prototype,"castAbilities",null),t([a({readOnly:!0})],g.prototype,"activeBookmark",void 0),t([a({type:d})],g.prototype,"bookmarks",null),t([a()],g.prototype,"defaultCreateOptions",null),t([a()],g.prototype,"defaultEditOptions",null),t([a({readOnly:!0})],g.prototype,"state",null),t([a({value:null})],g.prototype,"view",null),g=t([m(k)],g);const b=g;export{b as default};
