"use strict";(self.webpackChunkRemoteClient=self.webpackChunkRemoteClient||[]).push([[447],{52228:(e,t,i)=>{function s(e){return e&&"esri.renderers.visualVariables.SizeVariable"===e.declaredClass}function r(e){return null!=e&&!isNaN(e)&&isFinite(e)}function n(e){return e.valueExpression?"expression":e.field&&"string"==typeof e.field?"field":"unknown"}function o(e,t){const i=t||n(e),s=e.valueUnit||"unknown";return"unknown"===i?"constant":e.stops?"stops":null!=e.minSize&&null!=e.maxSize&&null!=e.minDataValue&&null!=e.maxDataValue?"clamped-linear":"unknown"===s?null!=e.minSize&&null!=e.minDataValue?e.minSize&&e.minDataValue?"proportional":"additive":"identity":"real-world-size"}i.d(t,{a:()=>o,b:()=>r,g:()=>n,i:()=>s})},71206:(e,t,i)=>{i.r(t),i.d(t,{default:()=>C});var s,r=i(29768),n=i(48027),o=i(82058),l=i(60991),a=i(76506),c=i(92143),u=i(89241),p=i(50406),h=i(40642),f=i(34250),d=(i(91306),i(17533)),y=i(2906),m=i(14249),b=i(65684),g=i(74071),_=i(60217),w=i(63571);i(54174),i(82426),i(29794),i(31450),i(71552),i(88762),i(32101),i(91700),i(6906),i(86656),i(22723),i(74569),i(21801),i(73796),i(74673),i(21972),i(23639),i(91055),i(97714),i(60947),i(91597),i(86787),i(35132),i(89623),i(84069),i(44567),i(98380),i(92896),i(22781),i(57251),i(32422),i(12158),i(74864),i(63683),i(94479),i(59465),i(45702),i(51127),i(51723),i(23243),i(51669),i(6090),i(3977),i(36741),i(34394),i(11253),i(90319),i(38822),i(74057),i(23761),i(86748),i(15324),i(76996),i(29107),i(30574),i(2157),i(25977),i(58076),i(98242),i(7471),i(54414),i(1648),i(8925),i(33921),i(3482),i(45154),i(16769),i(55531),i(30582),i(593),i(85699),i(96055),i(47776),i(18033),i(6331),i(62048),i(4292),i(75626),i(72652),i(29641),i(30493),i(70821),i(82673),i(34229),i(37029),i(96467),i(63130),i(25696),i(66396),i(42775),i(95834),i(57150),i(76726),i(20444),i(76393),i(78548),i(2497),i(30776),i(49906),i(46527),i(11799),i(48649),i(98402),i(9960),i(30823),i(53326),i(92482),i(5853),i(39141),i(38742),i(48243),i(34635),i(10401),i(49900),i(22739),i(20543),i(67477),i(78533),i(74653),i(91091),i(58943),i(70737),i(8487),i(17817),i(90814),i(15459),i(61847),i(16796),i(16955),i(22401),i(77894),i(55187),i(8586),i(44509),i(69814),i(11305),i(62259),i(44790),i(5909),i(60669),i(48208),i(51589),i(48190),i(85557),i(53785),i(95587);const S=c.L.getLogger("esri.renderers.DictionaryRenderer"),v={type:"CIMSimpleLineCallout",lineSymbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",width:.5,color:[0,0,0,255]}]}};let x=s=class extends((0,g.V)(b.Z)){constructor(e){super(e),this._ongoingRequests=new Map,this._symbolCache=new u.L(100),this.config=null,this.fieldMap=null,this.scaleExpression=null,this.scaleExpressionTitle=null,this.url=null,this.type="dictionary"}writeData(e,t){e&&(t.scalingExpressionInfo={expression:e,returnType:"number"})}writeVisualVariables(e,t,i,s){null!=s&&s.origin||super.writeVisualVariables(e,t,i,s)}clone(){return new s({config:(0,a.d9)(this.config),scaleExpression:this.scaleExpression,scaleExpressionTitle:this.scaleExpressionTitle,fieldMap:(0,a.d9)(this.fieldMap),url:(0,a.d9)(this.url),visualVariables:(0,a.d9)(this.visualVariables)})}async getSymbolAsync(e,t){let i;this._dictionaryPromise||(this._dictionaryPromise=this.fetchResources(t));try{i=await this._dictionaryPromise}catch(e){if((0,p.D_)(e))return this._dictionaryPromise=null,null}const s={};if(this.fieldMap)for(const t of this._symbolFields){const i=this.fieldMap[t];if(i&&null!==e.attributes[i]&&void 0!==e.attributes[i]){const r=""+e.attributes[i];s[t]=r}else s[t]=""}const r=i(s,t);if(!r||"string"!=typeof r)return null;const o=(0,h.n)(r).toString(),l=this._symbolCache.get(o);if(l)return l.catch((()=>{this._symbolCache.pop(o)})),l;const c=r.split(";"),u=[],f=[];for(const e of c)if(e&&0!==e.length)if(-1===e.indexOf("po:"))if(-1!==e.indexOf("|")){for(const t of e.split("|"))if(this._itemNames.has(t)){u.push(t);break}}else this._itemNames.has(e)&&u.push(e);else{const t=e.substr(3).split("|");if(3===t.length){const e=t[0],i=t[1];let s=t[2];if("DashTemplate"===i)s=s.split(" ").map((e=>Number(e)));else if("Color"===i){const e=new n.Z(s).toRgba();s=[e[0],e[1],e[2],255*e[3]]}else s=Number(s);f.push({primitiveName:e,propertyName:i,value:s})}}const d=!(0,a.i)(e.geometry)||!e.geometry.hasZ&&"point"===e.geometry.type,y=this._cimPartsToCIMSymbol(u,f,d,t);return this._symbolCache.put(o,y,1),y}async collectRequiredFields(e,t){await this.collectVVRequiredFields(e,t),this.scaleExpression&&await(0,m.io)(e,t,this.scaleExpression);for(const i in this.fieldMap){const s=this.fieldMap[i];t.has(s)&&e.add(s)}}get arcadeRequired(){return!0}async fetchResources(e){if(this._dictionaryPromise)return this._dictionaryPromise;if(!this.url)return void S.error("no valid URL!");const t=(0,a.i)(e)?e.abortOptions:null,i=(0,o.default)(this.url+"/resources/styles/dictionary-info.json",{responseType:"json",query:{f:"json"},...t}),[{data:s}]=await Promise.all([i,(0,_.l)()]);if(!s)throw this._dictionaryPromise=null,new l.Z("esri.renderers.DictionaryRenderer","Bad dictionary data!");const r=s.expression,n=s.authoringInfo;this._refSymbolUrlTemplate=this.url+"/"+s.cimRefTemplateUrl,this._itemNames=new Set(s.itemsNames),this._symbolFields=n.symbol;const c={};if(this.config){const e=this.config;for(const t in e)c[t]=e[t]}if(n.configuration)for(const e of n.configuration)c.hasOwnProperty(e.name)||(c[e.name]=e.value);const u=[];if((0,a.i)(e)&&e.fields&&this.fieldMap)for(const t of this._symbolFields){const i=this.fieldMap[t],s=e.fields.filter((e=>e.name===i));s.length>0&&u.push({...s[0],name:t})}return this._dictionaryPromise=(0,_.c)(r,(0,a.i)(e)?e.spatialReference:null,u,c).then((e=>{const t={scale:0};return(i,s)=>{const r=e.repurposeFeature({geometry:null,attributes:i});return t.scale=(0,a.i)(s)?s.scale:void 0,e.evaluate({$feature:r,$view:t})}})).catch((e=>(S.error("Creating dictinoary expression failed:",e),null))),this._dictionaryPromise}getSymbol(){return null}getSymbols(){return[]}getAttributeHash(){return this.visualVariables&&this.visualVariables.reduce(((e,t)=>e+t.getAttributeHash()),"")}getMeshHash(){return`${this.url}-${JSON.stringify(this.fieldMap)}`}getSymbolFields(){return this._symbolFields}async _getSymbolPart(e,t){if(this._ongoingRequests.has(e))return this._ongoingRequests.get(e).then((e=>e.data));const i=this._refSymbolUrlTemplate.replace(/\{itemName\}/gi,e),s=(0,o.default)(i,{responseType:"json",query:{f:"json"},...t});this._ongoingRequests.set(e,s);try{return(await s).data}catch(t){return this._ongoingRequests.delete(e),Promise.reject(t)}}_combineSymbolParts(e,t,i){if(!e||0===e.length)return null;const s={...e[0]};if(e.length>1){s.symbolLayers=[];for(const t of e){const e=t;s.symbolLayers.unshift(...e.symbolLayers)}}return i&&(s.callout=v),{type:"CIMSymbolReference",symbol:s,primitiveOverrides:t}}async _cimPartsToCIMSymbol(e,t,i,s){const r=new Array(e.length);for(let t=0;t<e.length;t++)r[t]=this._getSymbolPart(e[t],s);const n=await Promise.all(r);return new w.Z({data:this._combineSymbolParts(n,t,i)})}};(0,r._)([(0,f.Cb)({type:Object,json:{read:{source:"configuration"},write:{target:"configuration"}}})],x.prototype,"config",void 0),(0,r._)([(0,f.Cb)({type:Object,json:{write:!0}})],x.prototype,"fieldMap",void 0),(0,r._)([(0,f.Cb)({type:String,json:{read:{source:"scalingExpressionInfo.expression"},write:!0}})],x.prototype,"scaleExpression",void 0),(0,r._)([(0,y.w)("scaleExpression")],x.prototype,"writeData",null),(0,r._)([(0,f.Cb)({type:String,json:{read:{source:"scalingExpressionInfo.title"},write:{target:"scalingExpressionInfo.title",overridePolicy(e){return{enabled:!!e&&!!this.scaleExpression}}}}})],x.prototype,"scaleExpressionTitle",void 0),(0,r._)([(0,f.Cb)({type:String,json:{write:!0}})],x.prototype,"url",void 0),(0,r._)([(0,y.w)("visualVariables")],x.prototype,"writeVisualVariables",null),x=s=(0,r._)([(0,d.j)("esri.renderers.DictionaryRenderer")],x);const C=x}}]);